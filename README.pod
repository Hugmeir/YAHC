=encoding utf8

=head1 NAME

YAHC - Yet another HTTP client

=head1 SYNOPSIS

    use YAHC qw/yahc_reinit_conn/;

    my @hosts = ('www.booking.com', 'www.google.com:80');
    my ($yahc, $yahc_storage) = YAHC->new({ host => \@hosts });

    $yahc->request({ path => '/', host => 'www.reddit.com' });
    $yahc->request({ path => '/', host => sub { 'www.reddit.com' } });
    $yahc->request({ path => '/', host => \@hosts });
    $yahc->request({ path => '/', callback => sub { ... } });
    $yahc->request({ path => '/' });
    $yahc->request({
        path => '/',
        callback => sub {
            yahc_reinit_conn($_[0], { host => 'www.newtarget.com' })
                if $_[0]->{response}{status} == 301;
        }
    });

    $yahc->run;

=head1 DESCRIPTION

YAHC is fast & minimal low-level asynchronous HTTP client intended to be used
where you control both the client and the server. Is especially suits cases
where set of requests need to be executed against group of machines.

It is C<NOT> a general HTTP user agent, it doesn't support redirects,
proxies and any number of other advanced HTTP features like (in
roughly descending order of feature completeness) L<LWP::UserAgent>,
L<WWW::Curl>, L<HTTP::Tiny>, L<HTTP::Lite> or L<Furl>. This library is
basically one step above manually talking HTTP over sockets.

YAHC supports SSL and socket reuse (later is in experimental mode).

=head1 STATE MACHINE

Each YAHC connection goes through following list of states in its lifetime:

                  +-----------------+
              +<<-|   INITALIZED    <-<<+
              v   +-----------------+   ^
              v           |             ^
              v   +-------v---------+   ^
              +<<-+   RESOLVE DNS   +->>+
              v   +-----------------+   ^
              v           |             ^
              v   +-------v---------+   ^
              +<<-+    CONNECTING   +->>+
              v   +-----------------+   ^
              v           |             ^
     Path in  v   +-------v---------+   ^  Retry
     case of  +<<-+    CONNECTED    +->>+  logic
     failure  v   +-----------------+   ^  path
              v           |             ^
              v   +-------v---------+   ^
              +<<-+     WRITING     +->>+
              v   +-----------------+   ^
              v           |             ^
              v   +-------v---------+   ^
              +<<-+     READING     +->>+
              v   +-----------------+   ^
              v           |             ^
              v   +-------v---------+   ^
              +>>->   USER ACTION   +->>+
                  +-----------------+
                          |
                  +-------v---------+
                  |    COMPLETED    |
                  +-----------------+


There are three paths of workflow:

=over 4

=item 1) Normal execution (central line).

In normal situation a connection after being initialized goes through state:

- RESOLVE DNS

- CONNECTING - wait finishing of handshake

- CONNECTED

- WRITTING - sending request body

- READING - awaiting and reading response

- USER ACTION - see below

- COMPLETED - all done, this is terminal state

SSL connection has extra state SSL_HANDSHAKE after CONNECTED state. State
'RESOLVE DNS' is not implemented yet.

=item 2) Retry path (right line).

In case of IO error during normal execution YAHC retries connection
C<retries> times. In practise this means that connection goes back to
INITIALIZED state.

It's possible for a connection to go directly to COMPLETED state in case
of internal error.

=item 3) Failure path (left line).

If all retry attempts did not succeeded a connection goes to state 'USER
ACTION' (see below).

=back

=head2 State 'USER ACTION'

'USER ACTION' state is called right before connection if going to enter
'COMPLETED' state (with either failed or successful results) and is meant
to give a change to user to interupt the workflow.

'USER ACTION' state is entered in these circumstances:

=over 4

=item * HTTP response received. Note that non-200 responses are NOT treated as error. 

=item * unsupported HTTP response is received (such as response without Content-Length header

=item * retries limit reached

=back

When a connection enters this state C<callback> CodeRef is called:

    $yahc->request({
        ...
        callback => sub {
            my (
                $conn,          # connection 'object'
                $error,         # one of YAHC::Error::* constants
                $strerror       # string representation of error
            ) = @_;

            # Note that fields in $conn->{response} are not set 
            # if $error != # YAHC::Error::NO_ERROR()

            # HTTP response is stored in $conn->{response}.
            # It can be also accessed via yahc_conn_response().
            my $response = $conn->{response};
            my $status = $response->{status};
            my $body = $response->{body};
        }
    });

If there was no IO error C<yahc_conn_response> return value is a C<HashRef>
representing a response. It contains the following key-value pairs.

    proto         => :Str
    status        => :StatusCode
    body          => :Str
    head          => :HashRef

In case of error or non-200 HTTP response C<yahc_retry_conn> or
C<yahc_reinit_conn> may be called to give the request more chances to complete
successfully (for example by following redirects or providing new target
hosts).

Note that C<callback> should NOT throw exception. If so the connection will be
imidiately closed.

=head1 METHODS

=head2 new

This method creates YAHC object and accompanying storage object:

    my ($yahc, $yahc_storage) = YAHC->new();

This is a radical way of solving all possible memleak because of cyclic
references in callbacks. Since all references of callbacks are kept in
$yahc_storage object it's fine to use YAHC object inside request callback:

    my $yahc->request({
        callback => sub {
            $yahc->stop; # this is fine!!!
        },
    });

However, user has to guarantee that both $yahc and $yahc_storage objects are
kept in the same namespace. So, they will be destroyed at the same time.

C<new> can be passed with all parameters supported by C<request>. They
will be inherited by all requests.

Additionally, C<new> supports two parameters: C<socket_cache> and
C<account_for_signals>.

=head3 socket_cache

C<socket_cache> option controls socket reuse logic. By default socket cache is
disabled. If user wants YAHC reuse sockets he should set C<socket_cache> to a
HashRef.

    my ($yahc, $yahc_storage) = YAHC->new({ socket_cache => {} });

In this case YAHC maintains unused sockets keyed on C<join($;, $$, $host,
$port, $scheme)>. We use $; so we can use the $socket_cache->{$$, $host, $port,
$scheme} idiom to access the cache.

It's up to user to control the cache. It's also up to user to set necessary
request headers for keep-alive. YAHC does not cache socket in cases of a error,
HTTP/1.0 and when server explicitly instruct to close connection (i.e header
'Connection' = 'close').

=head3 account_for_signals

Another parameter C<account_for_signals> requires special attention! Here is
why:

=over 4

exerpt from EV documentation http://search.cpan.org/~mlehmann/EV-4.22/EV.pm#PERL_SIGNALS

While Perl signal handling (%SIG) is not affected by EV, the behaviour with EV
is as the same as any other C library: Perl-signals will only be handled when
Perl runs, which means your signal handler might be invoked only the next time
an event callback is invoked.

=back

In practise this means that none of set %SIG handlers will be called until EV
calls one of perl callbacks. Which, in some cases, may take long time. By
setting C<account_for_signals> YAHC adds C<EV::check> watcher with empty
callback effectively making EV calling the callback on every iteration. The
trickery comes at some performance cost. This is what EV documentation says
about it:

=over 4

... you can also force a watcher to be called on every event loop iteration by
installing a EV::check watcher. This ensures that perl gets into control for a
short time to handle any pending signals, and also ensures (slightly) slower
overall operation.

=back

So, if your code or the codes surrounding your code use %SIG handlers it's
wise to set C<account_for_signals>.

=head2 request

    protocol               => "HTTP/1.1", # (or "HTTP/1.0")
    scheme                 => "http" or "https"
    host                   => see below,
    port                   => ...,
    method                 => "GET",
    path                   => "/",
    query_string           => "",
    head                   => [],
    body                   => "",

    # timeouts
    connect_timeout        => undef,
    request_timeout        => undef,
    drain_timeout          => undef,

    # callbacks
    init_callback          => undef,
    connecting_callback   => undef,
    connected_callback     => undef,
    writing_callback       => undef,
    reading_callback       => undef,
    callback               => undef,

Notice how YAHC does not take a full URI string as input, you have to
specify the individual parts of the URL. Users who need to parse an
existing URI string to produce a request should use the L<URI> module
to do so.

For example, to send a request to C<http://example.com/flower?color=red>, pass
the following parameters:

    $yach->request({
        host         => "example.com",
        port         => "80",
        path         => "/flower",
        query_string => "color=red"
    });

=head3 request building

YAHC doesn't escape any values for you, it just passes them through
as-is. You can easily produce invalid requests if e.g. any of these
strings contain a newline, or aren't otherwise properly escaped.

Notice that you do not need to put the leading C<"?"> character in the
C<query_string>. You do, however, need to properly C<uri_escape> the content of
C<query_string>.

The value of C<head> is an C<ArrayRef> of key-value pairs instead of a
C<HashRef>, this way you can decide in which order the headers are
sent, and you can send the same header name multiple times. For
example:

    head => [
        "Content-Type" => "application/json",
        "X-Requested-With" => "YAHC",
    ]

Will produce these request headers:

    Content-Type: application/json
    X-Requested-With: YAHC

=head3 host

C<host> parameter can accept one of following values:

=over 4

    1) string - represents target host. String may have following formats:
    hostname:port, ip:port.

    2) ArrayRef of strings - YAHC will cycle through items selecting new host
    for each attempt.

    3) CodeRef. The subroutine is invoked for each attempt and should at least
    return a string (hostname or IP address). It can also return array
    containing: ($host, $ip, $port, $scheme). This option effectively give a
    user control over host selection for retries. The CodeRef is passed with
    connection "object" which can be fed to yahc_conn_* family of functions.

=back

=head3 timeouts

The value of C<connect_timeout>, C<request_timeout> and C<drain_timeout> is in
floating point seconds, and is used as the time limit for connecting to the
host (reaching CONNECTED state), full request time (reaching COMPLETED state)
and sending request to remote site (reaching READING state) respectively. The
default value for all is C<undef>, meaning no timeout limit. If you don't
supply these timeouts and the host really is unreachable or slow, we'll reach
the TCP timeout limit before returning some other error to you.

=head3 callbacks

The value of C<init_callback>, C<connecting_callback>, C<connected_callback>,
C<writing_callback>, C<reading_callback> is CodeRef to a subroutine which is
called upon reaching corresponding state. Any exception thrown in the
subroutine moves connection to COMPLETED state effectively terminating any
ongoing IO.

The value of C<callback> defines main request callback which is called when a
connection enters 'USER ACTION' state (see 'USER ACTION' state above).

Also see L<LIMITATIONS>

=head2 drop

Given connection HashRef or conn_id move connection to COMPLETED state (avoiding
'USER ACTION' state) and drop it from internal pool.

=head2 run

Start YAHC's loop. The loop stops when all connection complete.

Note that C<run> can accept two extra parameters: until_state and
list of connections. These two parameters tell YAHC to break the loop once
specified connections reach desired state.

For example:

    $yahc->run(YAHC::State::READING(), $conn_id);

Will loop until connection '$conn_id' move to state READING meaning that the
data has been sent to remote side. In order to gather response one should later
call:

    $yahc->run(YAHC::State::COMPLETED(), $conn_id);

Leaving list of connection empty makes YAHC waiting for all connection reaching
needed until_state.

Note that waiting one particular connection to finish doesn't mean that others
are not executed. Instead, all active connections are looped at the same
time, but YAHC breaks the loop once waited connection reaches needed state.

=head2 run_once

Same as run but with EV::RUN_ONCE set. For more details check L<https://metacpan.org/pod/EV>

=head2 run_tick

Same as run but with EV::RUN_NOWAIT set. For more details check L<https://metacpan.org/pod/EV>

=head2 is_running

Return true if YAHC is running, false otherwise.

=head2 loop

Return underlying EV loop object.

=head2 break

Break running EV loop if any.

=head1 EXPORTED FUNCTIONS

=head2 yahc_reinit_conn

C<yahc_reinit_conn> reinitialize given connection. The attempt counter is reset
to 0. The function accepts HashRef as second argument. By passing it one can
change host, port, scheme, body, head and others parameters. The format and
meaning of these parameters is same as in C<request> method.

One of use cases of C<yahc_reinit_conn>, for example, is to handle redirects:

    use YAHC qw/yahc_reinit_conn/;

    my ($yahc, $yahc_storage) = YAHC->new();
    $yahc->request({
        host => 'domain_which_returns_301.com',
        callback => sub {
            my $conn = $_[0];
            yahc_reinit_conn($conn, { host => 'www.newtarget.com' })
                if $_[0]->{response}{status} == 301;
        }
    });

    $yahc->run;

C<yahc_reinit_conn> is meant to be called inside C<callback> i.e. when
connection is in 'USER ACTION' state.

=head2 yahc_retry_conn

Retries given connection. C<yahc_retry_conn> should be called only if
C<yahc_conn_attempts_left> returns positive value. Otherwise, it exits silently.

C<yahc_conn_attempts_left> is meant to be called inside C<callback> similarly
to C<yahc_reinit_conn>.

=head2 yahc_conn_id

Return id of given connection.

=head2 yahc_conn_state

Retrun state of given connection

=head2 yahc_conn_target

Return selected host and port for current attempt for given connection.
Format "host:port". Default port values are omitted.

=head2 yahc_conn_url

Same as C<yahc_conn_target> but return full URL

=head2 yahc_conn_errors

Return errors appeared in given connection. Note that the function returns all
errors, not only ones happened during current attempt. Returned value is
ArrayRef of ArrayRefs. Later one represents a error and contains following
items:

=over 4

    error number (see YAHC::Error constants)
    error string
    ArrayRef of host, ip, port, scheme
    time when the error happened

=back

=head2 yahc_conn_last_error

Return last error appeared in connection. See C<yahc_conn_errors>.

=head2 yahc_conn_timeline

Return timeline of given connection. See more about timeline in description of
C<new> method.

=head2 yahc_conn_request

Return request of given connection. See C<request>.

=head2 yahc_conn_response

Return response of given connection. See C<request>.

=head1 REPOSITORY

L<https://github.com/ikruglov/YAHC>

=head1 NOTES

=head2 UTF8 flag

Note that YAHC has astonishing reduction in performance if any parameters
participating in building HTTP message has UTF8 flag set. Those fields are
C<protocol>, C<host>, C<port>, C<method>, C<path>, C<query_string>, C<head>,
C<body> and maybe others.

Just one example (check scripts/utf8_test.pl for code). Simple HTTP request
with 10MB of payload:

    elapsed without utf8 flag: 0.039s
    elapsed with utf8 flag: 0.540s

Because of this YAHC warns if detected UTF8-flagged payload. The user needs
to make sure that *all* data passed to YAHC is unflagged binary strings.

=head2 LIMITATIONS

=over 4

=item * State 'RESOLVE DNS' is not implemented yet.

=item * YAHC currently don't support servers returning a http body without an
accompanying C<Content-Length> header; bodies B<MUST> have a C<Content-Length>
or we won't pick them up.

=back

=head1 AUTHORS

Ivan Kruglov <ivan.kruglov@yahoo.com>

=head1 COPYRIGHT

Copyright (c) 2013-2016 Ivan Kruglov C<< <ivan.kruglov@yahoo.com> >>.

=head1 ACKNOWLEDGMENT

This module derived lots of ideas, code and docs from Hijk
L<https://github.com/gugod/Hijk>. This module was originally developed for
Booking.com.

=head1 LICENCE

The MIT License

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

